
Possible improvements
---------------------
* Tidy up the layout submodule. Make it more useful and generic.

* Rework the maketest submodule in light of the technical report
  (simplify, more reuse from generic routines in nta/parsednta).
  Possibly separate out the bits for creating and manipulating clock
  expressions (could be useful for other types of Uppaal manipulations.)
	/|\
	 |    combine these two...
	\|/
* Add a feature for making a model `input-enabled', i.e. adding self-loops
  for inputs, when no other transition for the input at a location is
  enabled.

* Shift DTD information into program so that a separate file is no longer
  required.

* Tidy up the environment and expression modules. Make them more generic.
  Much more work: Reexamine manipulation of expressions and transitions (also in
		  maketest) (particularly bindings). Ideally, we could integrate
		  this with Isabelle somehow to double-check the correctness.
	     Ideas:
	     * generate a proof script as the program runs, each
	       manipulation occurs as a lemma (with necessary assumptions --
	       global?), the presumed justification is listed as a proof
	       step. This script should pass through Isabelle automatically.
	       Easier to prove correctness of program more generally?
	     * more advanced: allow the user to force certain manipulations
	       (such as swapping of select/forall bindings), it would then
	       be up to them to provide proof steps (manually) to make the
	       script acceptable to Isabelle (if possible).
	     * exploit the Isabelle term-rewriting engine to normalize
	       terms and do other manipulations.

